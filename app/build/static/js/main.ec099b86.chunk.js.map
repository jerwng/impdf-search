{"version":3,"sources":["navbar.js","inputs.js","images.js","image-modal.js","status.js","App.js","utils/api.js","reportWebVitals.js","index.js"],"names":["TopNavbar","react_default","a","createElement","Navbar","bg","variant","Brand","href","UploadPDF","props","disabled","file","loading","Form","onSubmit","handleSubmit","Group","id","className","File","label","name","onChange","handleUpload","onMouseEnter","e","target","style","cursor","onMouseLeave","accept","custom","key","Button","onClick","handleDeleteFile","type","SearchWords","preventDefault","newSearchWord","undefined","value","handleSetSearchWords","Control","placeholder","Inputs","_useState","useState","_useState2","Object","slicedToArray","setFile","uploadedFile","files","handleDeleteFileServer","searchDisabled","Thumbnail","src","concat","photo","alt","handleClick","Images","Row","xs","photos","map","index","Col","ImageModal","show","setShow","useEffect","selectedPhotoID","Modal","onHide","setSelectedPhotoID","animation","Header","closeButton","Body","selectedPhoto","Status","spinner","message","Spinner","Alert","App","pollingInterval","allPhotos","ocr","fileData","setFileData","_useState3","_useState4","displayedPhotos","setDisplayedPhotos","_useState5","_useState6","setselectedPhotoID","_useState7","_useState8","spinnerShow","setSpinnerShow","_useState9","_useState10","statusMessage","setStatusMessage","pollingIntervalCount","pollingTimer","jobID","Promise","resolve","reject","fetch","method","then","res","ok","json","catch","err","uapi_get_results","status","clearInterval","handleClickThumbnail","navbar","src_inputs","pdf","file_form_data","FormData","append","body","res_json","setInterval","newSearchWordArr","split","searchBody","headers","Content-Type","JSON","stringify","uapi_post_search","searchWord","_ref","asyncToGenerator","regenerator_default","mark","_callee","err_json","wrap","_context","prev","next","sent","stop","_x","apply","this","arguments","length","src_images","image_modal","src_status","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.ec099b86.chunk.js","sourcesContent":["import React from 'react';\n\nimport Navbar from 'react-bootstrap/Navbar';\n\nfunction TopNavbar() {\n  return <Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"#home\">Images PDF Searcher</Navbar.Brand>\n  </Navbar>;\n}\n\nexport default TopNavbar;","import React, { useState, useEffect } from 'react';\n\nimport Form from \"react-bootstrap/Form\"\nimport Button from \"react-bootstrap/Button\"\n\nimport './css/inputs.css';\n\n/**\n * Sub-component for: App\n * \n * @param {Function} props.handleUpload Handler to submit the uploaded file to server.\n * @param {Function} props.handleSetSearchWords Handler to submit the search words.\n * @param {Function} props.handleDeleteFileServer Handler to delete the uploaded file.\n * @param {Boolean} props.loading Boolean to indicate if server is processing the request.\n * @param {Boolean} props.searchDisabled Boolean to indicate if there are photos available to search.\n * \n * @returns The input component of the web app. \n */\nfunction Inputs(props) {\n  const[file, setFile] = useState(undefined)\n\n  /**\n   * Handler to submit the uploaded file to server.\n   * @param {Event} e Event for the submit event.\n   */\n  const handleSubmit = (e) => {\n    // prevent refresh after submit.\n    e.preventDefault()\n    props.handleUpload(file)\n  }\n\n\n  /**\n   * Handler to submit the search words.\n   * @param {Event} e Event for the upload event.\n   */\n  const handleUploadFile = (e) => {\n    const uploadedFile = e.target.files[0]\n    setFile(uploadedFile)\n\n  }\n\n  /**\n   * Handler to delete the uploaded file.\n   */\n  const handleDeleteFile = () => {\n    setFile(undefined)\n    props.handleDeleteFileServer()\n  }\n\n  return <div id=\"inputs-container\">\n    <UploadPDF \n      handleUpload={handleUploadFile}\n      handleSubmit={handleSubmit}\n      handleDeleteFile={handleDeleteFile}\n      loading={props.loading}\n      file={file}\n    />\n    <SearchWords \n      handleSetSearchWords={props.handleSetSearchWords}\n      disabled={props.searchDisabled}\n    />\n    \n  </div>\n}\n\n/**\n * Sub-component for: Inputs\n * \n * @param {Function} props.handleUpload Handler to let user select the file to upload.\n * @param {Function} props.handleSubmit Handler to submit the selected file.\n * @param {Function} props.handleDeleteFile Handler to delete the uploaded file.\n * @param {Boolean} props.loading Boolean to indicate if server is processing the request.\n * @param {File} props.file The selected file submitted for OCR.\n * \n * @returns The component to let user select PDF files to upload.\n */\nfunction UploadPDF(props) {\n  const handleMouseEnter = (e) => {\n    e.target.style.cursor = 'pointer'\n  }\n\n  const handleMouseLeave = (e) => {\n    e.target.style.cursor = ''\n  }\n\n  // disable upload if no file is selected or another file is processing\n  let disabled = props.file && !props.loading ? false : true\n\n  return <Form onSubmit={props.handleSubmit}>\n    <Form.Group id=\"upload-pdf-file-form-group\">\n      <h3 className=\"inputs-label\">Upload PDF File</h3>\n      <Form.File \n        id=\"upload-pdf-file\" \n        label={props.file ? props.file.name : \"No File Selected\"}\n        onChange={props.handleUpload} \n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        accept=\".pdf\" custom      \n        /*\n        key={} needed for handleDeleteFile.\n        If not, input will not respond if user uploads file with same name after delete.\n\n        Solution provided by: https://stackoverflow.com/a/55495449\n        */\n        key={props.file}\n      />\n    </Form.Group>\n    <div id=\"upload-pdf-file-button-container\">\n      <Button\n        id=\"upload-pdf-file-delete-button\"\n        className=\"upload-pdf-file-button\"\n        variant=\"danger\"\n        onClick={props.handleDeleteFile}\n        disabled={disabled}\n      >\n        Delete\n      </Button>\n      <Button\n        id=\"upload-pdf-file-upload-button\"\n        className=\"upload-pdf-file-button\"\n        variant=\"success\"\n        type=\"submit\"\n        disabled={disabled}\n      >\n        Upload\n      </Button>\n    </div>\n  </Form>\n}\n\n/**\n * Sub-Component for: Inputs\n * @param {Function} props.handleSetSearchWords Handler to submit the search words.\n * @param {Boolean} props.disabled Boolean to indicate if there are photos available to search.\n * \n * @returns The search words component to filter images with selected words.\n */\nfunction SearchWords(props) {\n  /**\n   * \n   * @param {Event} e Event for the submit event.\n   */\n  const handleSubmit = (e) => {\n    e.preventDefault()\n  \n    let newSearchWord = undefined\n    /* e.target[0].value contains the search word value in the input */\n    if (e.target[0].value !== \"\") {\n      newSearchWord = e.target[0].value\n    }\n\n    props.handleSetSearchWords(newSearchWord)\n  }\n\n  return <Form onSubmit={handleSubmit}>\n    <Form.Group id=\"search-words-form-group\">\n      <h3 className=\"inputs-label\">Search Words</h3>\n      <Form.Control id=\"search-words-input\" placeholder=\"Enter Search Words\" disabled={props.disabled}/>\n    </Form.Group>\n    <Button \n      id=\"search-words-button\" \n      variant=\"success\"\n      type=\"submit\"\n      disabled={props.disabled}\n    >\n      Search\n    </Button>\n  </Form>\n}\n\nexport default Inputs","import React from \"react\"\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nimport './css/images.css';\n\n/**\n * The images component to display the rows of thumbnail sized images.\n * \n * Sub-component for: App\n * \n * @param {String} props.photos The photos converted from the PDF. data:image/jpeg;base64 format.\n * @param {Function} props.handleClick Function for when a image is clicked.\n * @returns The images component to display the rows of thumbnail sized images.\n */\nfunction Images(props) {\n  return (\n    <Row xs=\"auto\"> {\n      props.photos.map((photo, index) => {\n        return (\n          <Col xs=\"auto\" key={index}>\n            <Thumbnail\n              photo={photo}\n              id={index}\n              handleClick={props.handleClick}\n            />\n          </Col>\n        )\n      })\n    }\n    </Row>\n  )\n}\n\n/**\n * Sub-component for: Images\n * \n * @param {String} props.photos The individual photo converted from the PDF. data:image/jpeg;base64 format.\n * @param {Number} props.id The index of the indivual photo.\n * @returns An <img> element for the individual photo.\n */\nfunction Thumbnail(props) {\n  const handleClick = () => {\n    props.handleClick(props.id)\n  }\n\n  const handleMouseEnter = (e) => {\n    e.target.style.cursor = 'pointer'\n  }\n\n  const handleMouseLeave = (e) => {\n    e.target.style.cursor = ''\n  }\n\n  return (\n    <img\n      className=\"image-thumbnail\"\n      src={\"data:image/jpeg;base64, \".concat(props.photo)} // concat data:image/jpeg;base64, in front of the base64 encoded image to allow for <img> to read the encoded image\n      alt=\"\"\n      onClick={handleClick}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    />\n  )\n}\n\nexport default Images","import React, { useState, useEffect } from \"react\"\n\nimport Modal from 'react-bootstrap/Modal'\n\nimport './css/images.css';\n\n/**\n * The image modal component to display the enlarged selected image.\n * \n * Sub-component for: App\n * \n * @param {String} props.selectedPhoto: The selected photo passed to the modal to be displayed. data:image/jpeg;base64 format.\n * @param {Number} props.selectedPhotoID: The index of the selected photo.\n * @param {Function} props.setSelectedPhotoID: Function to set the index of the selected photo.\n * \n * @returns The image modal component to display the enlarged selected image.\n */\nfunction ImageModal(props) {\n  const [show, setShow] = useState(false)\n\n  useEffect(() => {\n    if (typeof props.selectedPhotoID !== 'undefined') {\n      setShow(true)\n    }\n  }, [props.selectedPhotoID])\n\n  /**\n   * Handler for when the modal is closed.\n   */\n  const handleClose = () => {\n    setShow(false)\n    /*\n      Un-select selected photo when modal closes.\n      Required to ensure modal re-shows if same photo is re-selected immediately \n      after closing modal.\n      */\n    props.setSelectedPhotoID(undefined)\n  }\n\n  return (\n    /* \n    animation={false} to suppress \"Warning: findDOMNode is deprecated in StrictMode message.\"\"\n    Solution from https://stackoverflow.com/a/64325602 */\n    <Modal show={show} onHide={handleClose} animation={false}> \n      <Modal.Header closeButton> Image </Modal.Header>\n      <Modal.Body>    \n        <img\n          className=\"image-modal\"\n          src={\"data:image/jpeg;base64, \".concat(props.selectedPhoto)} // concat data:image/jpeg;base64, in front of the base64 encoded image to allow for <img> to read the encoded image\n          alt=\"\"\n        />\n      </Modal.Body>\n    </Modal>\n  )\n}\n\nexport default ImageModal","import React from 'react';\n\nimport Spinner from 'react-bootstrap/Spinner'\nimport Alert from 'react-bootstrap/Alert'\n\nimport \"./css/status.css\"\n\nfunction Status(props) {\n  let spinner\n  if (props.show) {\n    spinner = StatusSpinner()\n  } \n  else if (typeof(props.message) !== \"undefined\") {\n    spinner = StatusMessage(props.message)\n  }\n\n  return (\n    <div className=\"status\">\n      {spinner}\n    </div>\n    \n  )\n}\n\nfunction StatusSpinner() {\n  return (\n    <Spinner animation=\"border\"/>\n  )\n}\n\nfunction StatusMessage(message) {\n  return (\n    <Alert variant=\"danger\">\n      {message}\n    </Alert>\n  )\n}\n\nexport default Status","import React, { useState } from 'react';\nimport './css/App.css';\n\nimport TopNavbar from \"./navbar.js\"\nimport Inputs from \"./inputs.js\"\nimport Images from \"./images.js\"\nimport ImageModal from \"./image-modal.js\"\nimport Status from \"./status.js\"\n\nimport { uapi_post_pdf, uapi_post_search, uapi_get_results } from \"./utils/api.js\";\n\n/**\n * Main parent component for the web app. Parent component for the Navbar, Input and Image sub-components.\n * \n * @returns {<div>} The main parent component for the web app.\n */\nfunction App() {\n\n  const [fileData, setFileData] = useState({\n    // allPhoto: photo for each page of the PDF\n    allPhotos: [],\n    ocr: {}\n  })\n\n  // displayedPhotos: photos filtered by the search bar.\n  const [displayedPhotos, setDisplayedPhotos] = useState([])\n  const [selectedPhotoID, setselectedPhotoID] = useState(undefined)\n  const [spinnerShow, setSpinnerShow] = useState(false)\n  const [statusMessage, setStatusMessage] = useState(undefined)\n\n  let pollingIntervalCount = 0\n  let pollingInterval\n\n  /**\n   * Handler for the Inputs sub-component. \n   * Submit the file to server to start performing OCR.\n   * \n   * @param {File} file The uploaded file selected by the user.\n   */\n  const handleUpload = (file) => {\n    const file_form_data = new FormData();\n    file_form_data.append('file', file);\n\n    setSpinnerShow(true)\n\n    uapi_post_pdf(file_form_data).then((res) => {\n      /* \n      Server responds with a jobID once the file is submitted for OCR in the background.\n      Call polling function every 10s to check if OCR is done.\n      */\n      pollingIntervalCount = 0\n      pollingInterval = setInterval(() => pollingTimer(res.jobID), 10000)\n    })\n\n  }\n\n  /**\n   * Polling function to check if the OCR background job is completed.\n   * \n   * @param {String} jobID The jobID for the OCR background job.\n   */\n  const pollingTimer = (jobID) => {\n    uapi_get_results(jobID).then((res) => {\n      /**\n       * Render the processed photo and stop polling cuntion once OCR background job\n       * finishes and returns the values.\n       */\n      if (res.status === \"Finished\") {\n        clearInterval(pollingInterval)\n        setFileData({\n          allPhotos: res.photos,\n          ocr: res.ocr\n        })\n\n        setDisplayedPhotos(res.photos)\n        setSpinnerShow(false)\n        setStatusMessage(undefined)\n      }\n\n      pollingIntervalCount += 1\n\n      // Stop polling if background job is not done in 5 mins.\n      if (pollingIntervalCount > 30) {\n        clearInterval(pollingInterval)\n        setSpinnerShow(false)\n        setStatusMessage(\"Timeout\")\n        pollingIntervalCount = 0\n      }\n    })\n  }\n\n  /**\n   * Handler to delete the uploaded file.\n   */\n  const handleDeleteFileServer = () => {\n    setFileData({\n      allPhotos: [],\n      ocr: {}\n    })\n\n    setDisplayedPhotos([])\n  }\n\n  /**\n   * Handler to enlarge the clicked photo into a modal.\n   * @param {Number} id The id for the clicked photo.\n   */\n  const handleClickThumbnail = (id) => {\n    setselectedPhotoID(id)\n  }\n\n  /**\n   * Handler to filter the list of photos to the ones containing the inputted search word.\n   * \n   * @param {String} newSearchWord \n   */\n  const handleSetSearchWords = (newSearchWord) => {\n    const newSearchWordArr = typeof(newSearchWord) !== \"undefined\" ? newSearchWord.split(' ') : []\n    const searchBody = {\n      allPhotos: fileData.allPhotos,\n      ocr: fileData.ocr,\n      searchWord: newSearchWordArr\n    }\n  \n    uapi_post_search(searchBody).then((res) => {\n      setDisplayedPhotos(res.photos)\n    }).catch(async (err) => {\n      const err_json = await err.json()\n      setStatusMessage(err_json.message)\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <TopNavbar />\n      <Inputs \n        handleUpload={handleUpload}\n        handleSetSearchWords={handleSetSearchWords}\n        handleDeleteFileServer={handleDeleteFileServer}\n        loading={spinnerShow}\n        searchDisabled={fileData.allPhotos.length === 0}\n      />\n      <Images \n        photos={displayedPhotos}\n        handleClick={handleClickThumbnail}\n      />\n      <ImageModal \n        selectedPhoto={displayedPhotos[selectedPhotoID]} \n        selectedPhotoID={selectedPhotoID}\n        setSelectedPhotoID={handleClickThumbnail}\n      />\n      <Status show={spinnerShow} message={statusMessage}/>\n    </div>\n  );\n}\n\nexport default App;\n","// TODO: Change API URL in production\n\nexport function uapi_test() {\n  return new Promise(function (resolve, reject) {\n    fetch(\"https://impdf-searcher.herokuapp.com/test/\", {\n      method: \"GET\",\n    }).then((res) => {\n      if (res.ok) {\n        resolve(res);\n      } else {\n        throw res;\n      }\n    }).catch((err) => {\n      reject(err)\n    })\n  })\n}\n\nexport function uapi_get_results(jobID) {\n  return new Promise((resolve, reject) => {\n    fetch(`https://impdf-searcher.herokuapp.com/results/${jobID}/`, {\n      method: \"GET\"\n    }).then((res) => {\n      if (res.ok) {\n        resolve(res.json())\n      } else {\n        throw res;\n      }\n\n    }).catch((err) => {\n      reject(err)\n    })\n  })\n}\n\nexport function uapi_post_pdf(pdf) {\n  return new Promise(function (resolve, reject) {\n    fetch(\"https://impdf-searcher.herokuapp.com/pdf/\", {\n      method: \"POST\",\n      body: pdf\n    }).then((res) => {\n      if (res.ok) {\n        return res.json()\n      } else {\n        throw res\n      }\n    }).then((res_json) => {\n      resolve(res_json)\n    }).catch((err) => {\n      reject(err);\n    })\n    \n  });\n}\n\nexport function uapi_post_search(searchBody) {\n  return new Promise(function (resolve, reject) {\n    fetch(\"https://impdf-searcher.herokuapp.com/search/\", {\n      method:\"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(searchBody)\n    }).then((res) => {\n      if (res.ok) {\n        return res.json()\n      } else {\n        throw res\n      }\n    }).then((res_json) => {\n      resolve(res_json)\n    }).catch((err) => {\n      reject(err)\n    })\n  })\n}\n\nexport function uapi_delete_disconnect(searchBody) {\n  return new Promise(function (resolve, reject){\n    fetch(\"https://impdf-searcher.herokuapp.com/disconnect/\", {\n      method: \"DELETE\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(searchBody)\n    }).then((res) => {\n      if (res.ok) {\n        resolve(res);\n      } else {\n        throw res;\n      }\n    }).catch((err) => {\n      reject(err)\n    })\n  })\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}