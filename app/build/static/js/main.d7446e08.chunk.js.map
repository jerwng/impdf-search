{"version":3,"sources":["navbar.js","inputs.js","images.js","image-modal.js","status.js","utils/api.js","App.js","reportWebVitals.js","index.js"],"names":["TopNavbar","react_default","a","createElement","Navbar","bg","variant","Brand","href","UploadPDF","props","disabled","file","loading","Form","onSubmit","handleSubmit","Group","id","className","File","label","name","onChange","handleUpload","onMouseEnter","e","target","style","cursor","onMouseLeave","accept","custom","key","Button","onClick","handleDeleteFile","type","SearchWords","preventDefault","newSearchWord","undefined","value","handleSetSearchWords","Control","placeholder","Inputs","_useState","useState","_useState2","Object","slicedToArray","setFile","uploadedFile","files","handleDeleteFileServer","searchDisabled","Thumbnail","src","photo","alt","handleClick","Images","Row","xs","photos","map","index","Col","ImageModal","show","setShow","useEffect","selectedPhotoID","Modal","onHide","setSelectedPhotoID","animation","Header","closeButton","Body","selectedPhoto","Status","spinner","message","Spinner","Alert","url","uapi_delete","searchBody","Promise","resolve","reject","fetch","concat","method","headers","Content-Type","body","JSON","stringify","then","res","ok","catch","err","App","pollingInterval","allPhotos","ocr","fileID","fileData","setFileData","_useState3","_useState4","displayedPhotos","setDisplayedPhotos","_useState5","_useState6","setselectedPhotoID","_useState7","_useState8","spinnerShow","setSpinnerShow","_useState9","_useState10","statusMessage","setStatusMessage","pollingIntervalCount","pollingTimer","jobID","json","uapi_get_results","status","clearInterval","handleClickThumbnail","navbar","src_inputs","pdf","file_form_data","FormData","append","res_json","setInterval","newSearchWordArr","split","length","uapi_post_search","searchWord","_ref","asyncToGenerator","regenerator_default","mark","_callee","err_json","wrap","_context","prev","next","sent","stop","_x","apply","this","arguments","src_images","image_modal","src_status","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d7446e08.chunk.js","sourcesContent":["import React from 'react';\n\nimport Navbar from 'react-bootstrap/Navbar';\n\nfunction TopNavbar() {\n  return <Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"#home\">Images PDF Searcher</Navbar.Brand>\n  </Navbar>;\n}\n\nexport default TopNavbar;","import React, { useState } from 'react';\n\nimport Form from \"react-bootstrap/Form\"\nimport Button from \"react-bootstrap/Button\"\n\nimport './css/inputs.css';\n\n/**\n * Sub-component for: App\n * \n * @param {Function} props.handleUpload Handler to submit the uploaded file to server.\n * @param {Function} props.handleSetSearchWords Handler to submit the search words.\n * @param {Function} props.handleDeleteFileServer Handler to delete the uploaded file.\n * @param {Boolean} props.loading Boolean to indicate if server is processing the request.\n * @param {Boolean} props.searchDisabled Boolean to indicate if there are photos available to search.\n * \n * @returns The input component of the web app. \n */\nfunction Inputs(props) {\n  const[file, setFile] = useState(undefined)\n\n  /**\n   * Handler to submit the uploaded file to server.\n   * @param {Event} e Event for the submit event.\n   */\n  const handleSubmit = (e) => {\n    // prevent refresh after submit.\n    e.preventDefault()\n    props.handleUpload(file)\n  }\n\n\n  /**\n   * Handler to submit the search words.\n   * @param {Event} e Event for the upload event.\n   */\n  const handleUploadFile = (e) => {\n    const uploadedFile = e.target.files[0]\n    setFile(uploadedFile)\n\n  }\n\n  /**\n   * Handler to delete the uploaded file.\n   */\n  const handleDeleteFile = () => {\n    setFile(undefined)\n    props.handleDeleteFileServer()\n  }\n\n  return <div id=\"inputs-container\">\n    <UploadPDF \n      handleUpload={handleUploadFile}\n      handleSubmit={handleSubmit}\n      handleDeleteFile={handleDeleteFile}\n      loading={props.loading}\n      file={file}\n    />\n    <SearchWords \n      handleSetSearchWords={props.handleSetSearchWords}\n      disabled={props.searchDisabled}\n    />\n    \n  </div>\n}\n\n/**\n * Sub-component for: Inputs\n * \n * @param {Function} props.handleUpload Handler to let user select the file to upload.\n * @param {Function} props.handleSubmit Handler to submit the selected file.\n * @param {Function} props.handleDeleteFile Handler to delete the uploaded file.\n * @param {Boolean} props.loading Boolean to indicate if server is processing the request.\n * @param {File} props.file The selected file submitted for OCR.\n * \n * @returns The component to let user select PDF files to upload.\n */\nfunction UploadPDF(props) {\n  const handleMouseEnter = (e) => {\n    e.target.style.cursor = 'pointer'\n  }\n\n  const handleMouseLeave = (e) => {\n    e.target.style.cursor = ''\n  }\n\n  // disable upload if no file is selected or another file is processing\n  let disabled = props.file && !props.loading ? false : true\n\n  return <Form onSubmit={props.handleSubmit}>\n    <Form.Group id=\"upload-pdf-file-form-group\">\n      <h3 className=\"inputs-label\">Upload PDF File</h3>\n      <Form.File \n        id=\"upload-pdf-file\" \n        label={props.file ? props.file.name : \"No File Selected\"}\n        onChange={props.handleUpload} \n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        accept=\".pdf\" custom      \n        /*\n        key={} needed for handleDeleteFile.\n        If not, input will not respond if user uploads file with same name after delete.\n\n        Solution provided by: https://stackoverflow.com/a/55495449\n        */\n        key={props.file}\n      />\n    </Form.Group>\n    <div id=\"upload-pdf-file-button-container\">\n      <Button\n        id=\"upload-pdf-file-delete-button\"\n        className=\"upload-pdf-file-button\"\n        variant=\"danger\"\n        onClick={props.handleDeleteFile}\n        disabled={disabled}\n      >\n        Delete\n      </Button>\n      <Button\n        id=\"upload-pdf-file-upload-button\"\n        className=\"upload-pdf-file-button\"\n        variant=\"success\"\n        type=\"submit\"\n        disabled={disabled}\n      >\n        Upload\n      </Button>\n    </div>\n  </Form>\n}\n\n/**\n * Sub-Component for: Inputs\n * @param {Function} props.handleSetSearchWords Handler to submit the search words.\n * @param {Boolean} props.disabled Boolean to indicate if there are photos available to search.\n * \n * @returns The search words component to filter images with selected words.\n */\nfunction SearchWords(props) {\n  /**\n   * \n   * @param {Event} e Event for the submit event.\n   */\n  const handleSubmit = (e) => {\n    e.preventDefault()\n  \n    let newSearchWord = undefined\n    /* e.target[0].value contains the search word value in the input */\n    if (e.target[0].value !== \"\") {\n      newSearchWord = e.target[0].value\n    }\n\n    props.handleSetSearchWords(newSearchWord)\n  }\n\n  return <Form onSubmit={handleSubmit}>\n    <Form.Group id=\"search-words-form-group\">\n      <h3 className=\"inputs-label\">Search Words</h3>\n      <Form.Control id=\"search-words-input\" placeholder=\"Enter Search Words\" disabled={props.disabled}/>\n    </Form.Group>\n    <Button \n      id=\"search-words-button\" \n      variant=\"success\"\n      type=\"submit\"\n      disabled={props.disabled}\n    >\n      Search\n    </Button>\n  </Form>\n}\n\nexport default Inputs","import React from \"react\"\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nimport './css/images.css';\n\n/**\n * The images component to display the rows of thumbnail sized images.\n * \n * Sub-component for: App\n * \n * @param {String} props.photos The photos converted from the PDF. data:image/jpeg;base64 format.\n * @param {Function} props.handleClick Function for when a image is clicked.\n * @returns The images component to display the rows of thumbnail sized images.\n */\nfunction Images(props) {\n  return (\n    <Row xs=\"auto\"> {\n      props.photos.map((photo, index) => {\n        return (\n          <Col xs=\"auto\" key={index}>\n            <Thumbnail\n              photo={photo}\n              id={index}\n              handleClick={props.handleClick}\n            />\n          </Col>\n        )\n      })\n    }\n    </Row>\n  )\n}\n\n/**\n * Sub-component for: Images\n * \n * @param {String} props.photos The individual photo converted from the PDF. data:image/jpeg;base64 format.\n * @param {Number} props.id The index of the indivual photo.\n * @returns An <img> element for the individual photo.\n */\nfunction Thumbnail(props) {\n  const handleClick = () => {\n    props.handleClick(props.id)\n  }\n\n  const handleMouseEnter = (e) => {\n    e.target.style.cursor = 'pointer'\n  }\n\n  const handleMouseLeave = (e) => {\n    e.target.style.cursor = ''\n  }\n\n  return (\n    <img\n      className=\"image-thumbnail\"\n      src={props.photo}\n      alt=\"\"\n      onClick={handleClick}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    />\n  )\n}\n\nexport default Images","import React, { useState, useEffect } from \"react\"\n\nimport Modal from 'react-bootstrap/Modal'\n\nimport './css/images.css';\n\n/**\n * The image modal component to display the enlarged selected image.\n * \n * Sub-component for: App\n * \n * @param {String} props.selectedPhoto: The selected photo passed to the modal to be displayed. data:image/jpeg;base64 format.\n * @param {Number} props.selectedPhotoID: The index of the selected photo.\n * @param {Function} props.setSelectedPhotoID: Function to set the index of the selected photo.\n * \n * @returns The image modal component to display the enlarged selected image.\n */\nfunction ImageModal(props) {\n  const [show, setShow] = useState(false)\n\n  useEffect(() => {\n    if (typeof props.selectedPhotoID !== 'undefined') {\n      setShow(true)\n    }\n  }, [props.selectedPhotoID])\n\n  /**\n   * Handler for when the modal is closed.\n   */\n  const handleClose = () => {\n    setShow(false)\n    /*\n      Un-select selected photo when modal closes.\n      Required to ensure modal re-shows if same photo is re-selected immediately \n      after closing modal.\n      */\n    props.setSelectedPhotoID(undefined)\n  }\n\n  return (\n    /* \n    animation={false} to suppress \"Warning: findDOMNode is deprecated in StrictMode message.\"\"\n    Solution from https://stackoverflow.com/a/64325602 */\n    <Modal show={show} onHide={handleClose} animation={false}> \n      <Modal.Header closeButton> Image </Modal.Header>\n      <Modal.Body>    \n        <img\n          className=\"image-modal\"\n          src={props.selectedPhoto}\n          alt=\"enlarged\"\n        />\n      </Modal.Body>\n    </Modal>\n  )\n}\n\nexport default ImageModal","import React from 'react';\n\nimport Spinner from 'react-bootstrap/Spinner'\nimport Alert from 'react-bootstrap/Alert'\n\nimport \"./css/status.css\"\n\nfunction Status(props) {\n  let spinner\n  if (props.show) {\n    spinner = StatusSpinner()\n  } \n  else if (typeof(props.message) !== \"undefined\") {\n    spinner = StatusMessage(props.message)\n  }\n\n  return (\n    <div className=\"status\">\n      {spinner}\n    </div>\n    \n  )\n}\n\nfunction StatusSpinner() {\n  return (\n    <Spinner animation=\"border\"/>\n  )\n}\n\nfunction StatusMessage(message) {\n  return (\n    <Alert variant=\"danger\">\n      {message}\n    </Alert>\n  )\n}\n\nexport default Status","// TODO: Change API URL in production\n\nconst url = \"http://impdf-searcher.herokuapp.com\"\n\nexport function uapi_test() {\n  return new Promise(function (resolve, reject) {\n    fetch(`${url}/test/`, {\n      method: \"GET\",\n    }).then((res) => {\n      if (res.ok) {\n        resolve(res);\n      } else {\n        throw res;\n      }\n    }).catch((err) => {\n      reject(err)\n    })\n  })\n}\n\nexport function uapi_get_results(jobID) {\n  return new Promise((resolve, reject) => {\n    fetch(`${url}/results/${jobID}/`, {\n      method: \"GET\"\n    }).then((res) => {\n      if (res.ok) {\n        resolve(res.json())\n      } else {\n        throw res;\n      }\n\n    }).catch((err) => {\n      reject(err)\n    })\n  })\n}\n\nexport function uapi_post_pdf(pdf) {\n  return new Promise(function (resolve, reject) {\n    fetch(`${url}/pdf/`, {\n      method: \"POST\",\n      body: pdf\n    }).then((res) => {\n      if (res.ok) {\n        return res.json()\n      } else {\n        throw res\n      }\n    }).then((res_json) => {\n      resolve(res_json)\n    }).catch((err) => {\n      reject(err);\n    })\n    \n  });\n}\n\nexport function uapi_post_search(searchBody) {\n  return new Promise(function (resolve, reject) {\n    fetch(`${url}/search/`, {\n      method:\"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(searchBody)\n    }).then((res) => {\n      if (res.ok) {\n        return res.json()\n      } else {\n        throw res\n      }\n    }).then((res_json) => {\n      resolve(res_json)\n    }).catch((err) => {\n      reject(err)\n    })\n  })\n}\n\nexport function uapi_delete(searchBody) {\n  return new Promise(function (resolve, reject){\n    fetch(`${url}/delete/`, {\n      method: \"DELETE\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(searchBody)\n    }).then((res) => {\n      if (res.ok) {\n        resolve(res);\n      } else {\n        throw res;\n      }\n    }).catch((err) => {\n      reject(err)\n    })\n  })\n}","import React, { useState } from 'react';\nimport './css/App.css';\n\nimport TopNavbar from \"./navbar.js\"\nimport Inputs from \"./inputs.js\"\nimport Images from \"./images.js\"\nimport ImageModal from \"./image-modal.js\"\nimport Status from \"./status.js\"\n\nimport { uapi_post_pdf, uapi_post_search, uapi_get_results, uapi_delete } from \"./utils/api.js\";\n\n/**\n * Main parent component for the web app. Parent component for the Navbar, Input and Image sub-components.\n * \n * @returns {<div>} The main parent component for the web app.\n */\nfunction App() {\n\n  const [fileData, setFileData] = useState({\n    // allPhoto: photo for each page of the PDF\n    allPhotos: [],\n    ocr: {},\n    fileID: undefined\n  })\n\n  // displayedPhotos: photos filtered by the search bar.\n  const [displayedPhotos, setDisplayedPhotos] = useState([])\n  const [selectedPhotoID, setselectedPhotoID] = useState(undefined)\n  const [spinnerShow, setSpinnerShow] = useState(false)\n  const [statusMessage, setStatusMessage] = useState(undefined)\n\n  let pollingIntervalCount = 0\n  let pollingInterval\n\n  /**\n   * Handler for the Inputs sub-component. \n   * Submit the file to server to start performing OCR.\n   * \n   * @param {File} file The uploaded file selected by the user.\n   */\n  const handleUpload = (file) => {\n    const file_form_data = new FormData();\n    file_form_data.append('file', file);\n\n    setSpinnerShow(true)\n\n    /**\n     * Delete previous uploaded file data from server\n     */\n    if (typeof(fileData.fileID) !== \"undefined\") {\n      const searchBody = {\n        fileID: fileData.fileID\n      }\n\n      uapi_delete(searchBody)\n    }\n \n    uapi_post_pdf(file_form_data).then((res) => {\n      /* \n      Server responds with a jobID once the file is submitted for OCR in the background.\n      Call polling function every 10s to check if OCR is done.\n      */\n      pollingIntervalCount = 0\n      pollingInterval = setInterval(() => pollingTimer(res.jobID), 10000)\n    })\n\n  }\n\n  /**\n   * Polling function to check if the OCR background job is completed.\n   * \n   * @param {String} jobID The jobID for the OCR background job.\n   */\n  const pollingTimer = (jobID) => {\n    uapi_get_results(jobID).then((res) => {\n      /**\n       * Render the processed photo and stop polling cuntion once OCR background job\n       * finishes and returns the values.\n       */\n      if (res.status === \"Finished\") {\n        clearInterval(pollingInterval)\n        setFileData({\n          allPhotos: res.photos,\n          ocr: res.ocr,\n          fileID: res.id\n        })\n\n        setDisplayedPhotos(res.photos)\n        setSpinnerShow(false)\n        setStatusMessage(undefined)\n      }\n\n      pollingIntervalCount += 1\n\n      // Stop polling if background job is not done in 5 mins.\n      if (pollingIntervalCount > 30) {\n        clearInterval(pollingInterval)\n        setSpinnerShow(false)\n        setStatusMessage(\"Timeout\")\n        pollingIntervalCount = 0\n      }\n    })\n  }\n\n  /**\n   * Handler to delete the uploaded file.\n   */\n  const handleDeleteFileServer = () => {\n    if (typeof (fileData.fileID) !== \"undefined\") {\n      const searchBody = {\n        fileID: fileData.fileID\n      }\n      uapi_delete(searchBody)\n    }\n\n    setFileData({\n      allPhotos: [],\n      ocr: {},\n      fileID: undefined\n    })\n\n    setDisplayedPhotos([])\n  }\n\n  /**\n   * Handler to enlarge the clicked photo into a modal.\n   * @param {Number} id The id for the clicked photo.\n   */\n  const handleClickThumbnail = (id) => {\n    setselectedPhotoID(id)\n  }\n\n  /**\n   * Handler to filter the list of photos to the ones containing the inputted search word.\n   * \n   * @param {String} newSearchWord \n   */\n  const handleSetSearchWords = (newSearchWord) => {\n    const newSearchWordArr = typeof(newSearchWord) !== \"undefined\" ? newSearchWord.split(' ') : []\n\n    if (newSearchWordArr.length === 0) {\n      setDisplayedPhotos(fileData.allPhotos)\n    } else {\n      const searchBody = {\n        ocr: fileData.ocr,\n        searchWord: newSearchWordArr,\n        id: fileData.fileID\n      }\n    \n      uapi_post_search(searchBody).then((res) => {\n        setDisplayedPhotos(res.photos)\n      }).catch(async (err) => {\n        const err_json = await err.json()\n        setStatusMessage(err_json.message)\n      })\n    }\n\n  }\n\n  return (\n    <div className=\"App\">\n      <TopNavbar />\n      <Inputs \n        handleUpload={handleUpload}\n        handleSetSearchWords={handleSetSearchWords}\n        handleDeleteFileServer={handleDeleteFileServer}\n        loading={spinnerShow}\n        searchDisabled={fileData.allPhotos.length === 0}\n      />\n      <Images \n        photos={displayedPhotos}\n        handleClick={handleClickThumbnail}\n      />\n      <ImageModal \n        selectedPhoto={displayedPhotos[selectedPhotoID]} \n        selectedPhotoID={selectedPhotoID}\n        setSelectedPhotoID={handleClickThumbnail}\n      />\n      <Status show={spinnerShow} message={statusMessage}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}